package graphics;

import logic.*;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;

public class ViewPanel extends JPanel implements ActionListener {
    private Universe universe;
    private Timer timer;
    private ViewFrame frame;
    private int tickNumber;
    private Image shipImage;
    private Image planetImage;
    private Image universeImage;
    private Image flagImage;
    private Image red, green, yellow;
    private Image[] planetImages;
    private double mouseX = 100;
    private double mouseY = 100;



    public ViewPanel(ViewFrame f) {
        ImageLoader loader = new ImageLoader(Properties.properties.images);
        tickNumber = 0;
        universe = ViewFrame.universe;
        frame = f;
        timer = new Timer(50, this);
        timer.setInitialDelay(0);
        timer.start();

        shipImage = loader.getImage("ship");
        planetImage = loader.getImage("planet");
        universeImage = loader.getImage("universe");
        flagImage = loader.getImage("flag");
        red = loader.getImage("red");
        green = loader.getImage("green");
        yellow = loader.getImage("yellow");
        planetImages = new Image[100];
        for (int i = 0; i < 100; i++) {
            planetImages[i] = loader.getImage("planet" + i);
        }
        //planetImage = planetImages[0];
        planetImage = loader.getImage("planet");
        addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                mouseX = e.getX();
                mouseY = e.getY();

            }
        });

        addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                double eX = e.getX();
                double eY = e.getY();
                double x = (eX + frame.startX) / (Properties.properties.UNIVERSE_SIZE_X / 2.0) - 1;
                double y = (eY + frame.startY) / (Properties.properties.UNIVERSE_SIZE_Y / 2.0) - 1;
                if (e.getButton() == MouseEvent.BUTTON1) {
                    frame.currentObject = universe.getObject(x, y);
                    if (!frame.currentPlayer.equals(frame.currentObject.getMaster())) {
                        frame.currentObject = null;
                        return;
                    }
                    if (frame.currentObject instanceof Planet) {
                        frame.getBarPanel().enableButtons(true);
                        if (!frame.currentPlayer.equals(((Planet)frame.currentObject).getMaster())) {
                            frame.getBarPanel().enableButtons(false);
                        }
                    } else {
                        frame.getBarPanel().enableButtons(false);
                    }
                }
                else {
                    if (e.getButton() == MouseEvent.BUTTON3 && frame.currentObject != null && frame.currentObject instanceof SpaceShip)
                        ((SpaceShip) frame.currentObject).move(x, y);
                    else if (e.getButton() == MouseEvent.BUTTON3 && frame.currentObject != null && frame.currentObject instanceof Planet)
                        ((Planet) frame.currentObject).setTarget(x, y);
                }
            }
        });

        frame.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
           }
        });

    }


    public void paint(Graphics g) {
        //super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        moveScreen();
        g2.drawImage(universeImage,
                0, 0, (int)frame.width, (int)frame.height, this);



        Color[] c = new Color[]{Color.RED, Color.GREEN, Color.DARK_GRAY};

        for (Planet p : universe.getPlanets()) {
            g.drawImage(planetImage,
                    -frame.startX + (int)(p.getX() * Properties.properties.UNIVERSE_SIZE_X / 2
                            + Properties.properties.UNIVERSE_SIZE_X / 2 - 10 * p.getRadius()),
                    -frame.startY + (int)(p.getY() * Properties.properties.UNIVERSE_SIZE_Y / 2
                            + Properties.properties.UNIVERSE_SIZE_Y / 2 - 10 * p.getRadius()),
                    (int)(p.getRadius() * 20), (int)(p.getRadius() * 20), this);

            if (p.getMaster() != null) {
                if (p.getMaster() == frame.getCurrentPlayer()) {
                    g2.setColor(c[1]);
                } else {
                    g2.setColor(c[2]);
                }
                g2.drawOval(-frame.startX + (int)(p.getX() * Properties.properties.UNIVERSE_SIZE_X / 2
                                + Properties.properties.UNIVERSE_SIZE_X / 2 - 10 * p.getRadius()),
                            -frame.startY + (int)(p.getY() * Properties.properties.UNIVERSE_SIZE_Y / 2
                                    + Properties.properties.UNIVERSE_SIZE_Y / 2 - 10 * p.getRadius()),
                            (int)(p.getRadius() * 20),
                            (int)(p.getRadius() * 20));
            }
        }

        if (frame.currentObject instanceof Planet) {
            double x = ((Planet) frame.currentObject).getTargetX();
            double y = ((Planet) frame.currentObject).getTargetY();
            g2.drawImage(flagImage,
                    -frame.startX + (int)(x * Properties.properties.UNIVERSE_SIZE_X / 2 + Properties.properties.UNIVERSE_SIZE_X / 2 - 10),
                    -frame.startY + (int)(y * Properties.properties.UNIVERSE_SIZE_Y / 2 + Properties.properties.UNIVERSE_SIZE_Y / 2 - 10),
                    20, 20, this);
        }
        for (Player p : universe.getPlayers()) {
            for (SpaceShip s : p.getShips()) {
                if (p.equals(frame.getCurrentPlayer())) {
                    g2.setColor(c[1]);
                } else {
                    g2.setColor(c[2]);
                }
                g2.drawOval(-frame.startX + (int)(s.getX() * Properties.properties.UNIVERSE_SIZE_X / 2 + Properties.properties.UNIVERSE_SIZE_X / 2 - 10 * s.getRadius() - 3),
                            -frame.startY + (int)(s.getY() * Properties.properties.UNIVERSE_SIZE_Y / 2 + Properties.properties.UNIVERSE_SIZE_Y / 2 - 10 * s.getRadius() - 3),
                            (int)(s.getRadius() * 20 + 6),
                            (int)(s.getRadius() * 20 + 6));

                g2.drawImage(shipImage,
                        -frame.startX + (int)(s.getX() * Properties.properties.UNIVERSE_SIZE_X / 2 + Properties.properties.UNIVERSE_SIZE_X / 2 - 10 * s.getRadius()),
                        -frame.startY + (int)(s.getY() * Properties.properties.UNIVERSE_SIZE_Y / 2 + Properties.properties.UNIVERSE_SIZE_Y / 2 - 10 * s.getRadius()),
                        (int)(s.getRadius() * 20), (int)(s.getRadius() * 20), this);
                g2.setColor(Color.RED);
                g2.drawString("Player: gold - " + (int)frame.getCurrentPlayer().getGold() + ", iron - " + (int)frame.getCurrentPlayer().getIron(), 10, 10);
                g2.drawString("tick number: " + tickNumber, 10, 30);
            }
        }
        if (frame.currentObject instanceof logic.SpaceShip && ((logic.SpaceShip)frame.currentObject).isAlive())
            drawCurrent(g2);
        if (universe.getBullets().size() > 0) {
            for (Bullet b : universe.getBullets()) {
                if (b.getPlayer().equals(frame.currentPlayer))
                    g2.setColor(Color.ORANGE);
                else
                    g2.setColor(Color.DARK_GRAY);
                g2.drawLine(-frame.startX + (int)(b.getX1() * Properties.properties.UNIVERSE_SIZE_X / 2 + Properties.properties.UNIVERSE_SIZE_X / 2),
                            -frame.startY + (int)(b.getY1() * Properties.properties.UNIVERSE_SIZE_Y / 2 + Properties.properties.UNIVERSE_SIZE_Y / 2),
                            -frame.startX + (int)(b.getX2() * Properties.properties.UNIVERSE_SIZE_X / 2 + Properties.properties.UNIVERSE_SIZE_X / 2),
                            -frame.startY + (int)(b.getY2() * Properties.properties.UNIVERSE_SIZE_Y / 2 + Properties.properties.UNIVERSE_SIZE_Y / 2));
            }
        }
        g2.setColor(Color.WHITE);
        g2.fillRect(frame.width, 0, 1000, 1000);

        Point2D center = new Point2D.Float(50, 50);
        float radius = 25;
        float[] dist = {0.0f, 0.1f};
        Color[] colors = {Color.RED, new Color(0, 0, 0, 0)};
        RadialGradientPaint p =
                new RadialGradientPaint(center, radius, dist, colors);
        g2.setPaint (p);
        g2.fillOval( 100, 100, 30, 30);

        //g2.finalize();
    }

    private void drawCurrent(Graphics2D g2) {
        if (frame.currentObject != null) {
            g2.setColor(Color.RED);
            g2.drawOval(-frame.startX + (int)(frame.currentObject.getX() * Properties.properties.UNIVERSE_SIZE_X / 2 + Properties.properties.UNIVERSE_SIZE_X / 2 - 10 * frame.currentObject.getRadius() - 5),
                        -frame.startY + (int)(frame.currentObject.getY() * Properties.properties.UNIVERSE_SIZE_Y / 2 + Properties.properties.UNIVERSE_SIZE_Y / 2 - 10 * frame.currentObject.getRadius() - 5),
                        (int)(frame.currentObject.getRadius() * 20 + 10),
                        (int)(frame.currentObject.getRadius() * 20 + 10));
        }
    }

    private void tick() {
        universe.tick();
        tickNumber++;
        //planetImage = planetImages[tickNumber / 20 % 100];
    }

    private void moveScreen() {
        if (Math.abs(mouseX - 0) < Properties.properties.MOVE_SCREEN_AREA) {
            frame.startX -= 10;
        }
        if (Math.abs(mouseX - frame.width) < Properties.properties.MOVE_SCREEN_AREA) {
            frame.startX += 10;
        }
        if (Math.abs(mouseY - 0) < Properties.properties.MOVE_SCREEN_AREA) {
            frame.startY -= 10;
        }
        if (frame.height - 100 - mouseY < Properties.properties.MOVE_SCREEN_AREA) {
            frame.startY += 10;
        }
        if (frame.startX < 0) frame.startX = 0;
        if (frame.startX > Properties.properties.UNIVERSE_SIZE_X - frame.width)
            frame.startX = Properties.properties.UNIVERSE_SIZE_X - frame.width;
        if (frame.startY < 0) frame.startY = 0;
        if (frame.startY > Properties.properties.UNIVERSE_SIZE_Y - frame.height)
            frame.startY = Properties.properties.UNIVERSE_SIZE_Y - frame.height;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (tickNumber % 50 != 0) {
            //frame.ai.action();
            //frame.rai.action();
        }
        if (universe.isEndGame())
            frame.end();
        tick();
        if (tickNumber % 1 == 0)
            repaint();
    }
}
